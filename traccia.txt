L'associazione sportiva Kombat Inc. necessita di un software per la gestione di tornei.
Il software deve prevedere l'utilizzo di un database relazionale per immagazzinare dati relativi a tornei di: MMA, K1, BJJ.
Ad ogni torneo possono essere associate una o più gare/incontri, ad ogni incontro possono partecipare minimo zero massimo due atleti.
C'è la possibilità per un torneo di rendere le iscrizioni a pagamento, il software dovrà gestire anche questa eventualità tramite ticket che verranno poi pagati in una cassa fisica.
Gli utenti dovranno avere la possibilità di accedere alla loro area personale per visualizzare e modificare i dati relativi ai campi: email, password, nome, cognome, numero tessera, grado/cintura, categoria di peso (ove possibile)

Un Torneo è caratterizzato da:
    - Nome
    - Grado minimo richiesto
    - luogo
    - data
    - podio
    - Disciplina

Un Incontro è caratterizzato da:
    - Angolo Blu
    - Angolo Rosso
    - ID
    - Esito (angolo blu o angolo rosso)
    - Ora
    - Categoria
    - Coach all'angolo dell'atleta

Gli utenti dell'applicazione si dividono in: organizzatori, coach, atleti, arbitri.

Gli Organizzatori sono caratterizzati da:
    - Nome
    - Cognome
    - email
    - Federazione di appartenenza
    - Numero di tessera

I Coach sono caratterizzati da: 
    - Nome
    - Cognome
    - Palestra di appartenenza
    - email
    - Numero di tessera
    - grado/cintura

Gli Atleti sono caratterizzati da:
    - Nome
    - Cognome
    - Numero di tessera
    - Palestra di appartenenza
    - grado/cintura
    - categoria di peso
    - storico incontri

Gli Arbitri sono caratterizzati da:
    - Nome
    - Cognome
    - Email
    - Numero di tessera
    - Età

Il software deve permettere la registrazione di nuovi atleti e coach e il login tramite email e password.

Un organizzatore può partecipare all'organizzazione di una o più gare, un coach può iscrivere zero o più atleti ad un torneo e un atleta può partecipare a più gare anche nello stesso giorno.

Un Ticket dovrebbe indicare le seguenti informazioni:
    - ID
    - Costo
    - Data prenotazione
    - Scadenza

Obiettivi del Progetto
1. Analisi e progettazione concettuale
A partire dalla descrizione del contesto, analizza il dominio e costruisci un modello entità-relazione completo, includendo eventuali relazioni di generalizzazione/specializzazione tra entità. Spiega in modo chiaro come hai gestito tali relazioni e motiva le scelte effettuate.
2. Progettazione logica
Deriva il modello logico relazionale dal modello E-R, includendo una descrizione scritta dei vincoli rilevanti e giustificando eventuali semplificazioni o adattamenti.
3. Implementazione del sistema informativo
Utilizzando Django, realizza un’applicazione che permetta la gestione dei dati modellati e l’accesso ad almeno quattro funzionalità tra quelle previste nella descrizione iniziale. Tra le funzionalità realizzabili, si possono includere:
•   Visualizzazione del catalogo dei libri, con scheda dettagliata.
•   Registrazione e autenticazione degli utenti (differenziati per ruolo).
•   Registrazione e gestione dei prestiti (assegnazione e restituzione).
•   Inserimento e consultazione di recensioni.
•   Visualizzazione e iscrizione agli eventi.
•   Visualizzazione delle gerarchie del personale.
•   Ricerca nel catalogo per titolo, autore o parola chiave.
•   Selezione e visualizzazione delle opere di un determinato autore.
•   Storico dei prestiti per utente.
L’applicazione deve essere realizzata utilizzando esclusivamente:
•   Backend Django,
•   Sistema di template di Django per la generazione delle pagine,
•   Bootstrap CSS per la parte grafica.
L’uso di JavaScript è da limitare ai soli casi in cui sia indispensabile.


Mandare github al professore ++
Nel modello ER un figlio non si riferisce ad un figlio, la relazione deve essere ricorsiva tra utente e utente ++
In un incontro devono partecipare 2 atleti, 2 coach e 1 arbitro. L'organizzatore è legato al torneo, quindi aggiungere relazione tra utente e torneo nel modello ER ++
Aggiungere un attributo a torneo che indica chi fa l'angolo di ogni atleta ++
Scrivi le relazioni con cardinalità minima e massima, non solo massima ++
Scrivere gli attributi nel modello ER ++
Togli le FK dal modello logico ++
Scambia nomi file modello logico ed ER ++
Fai modello logico ++
---

Trasforma la relazione Organizzazione in una tabella ++
Descrivere scelte relative alla generalizzazione nel primo schema ER ++
Descrivere il tipo di gerarchia dell'entità Utente ++
Descrivere i vincoli
Fare roba SQL injection anche con sqlmap
Descrivere Funzionalità sito
Descrivere 


---
Pagina registrazione ++
    atleti ++
    coach ++
Login personalizzato per ogni utente ++
homepage personalizzata per ogni tipo di utente:
    atleta ++
    organizzatore ++
    coach ++
    arbitro ++
Funzione per visualizzare i profili di tutti degli utenti --
Funzione per visualizzare i dati di un incontro ++
Funzione per visualizzare i dati dei tornei ++
Funzione per creare i ticket da far scaricare agli atleti --
Funzione per i coach per iscrivere un atleta --
Area personale per ogni utente ++

usa licenza MIT su github

TODO:
Creazione nuovi tornei da organizzatore
    path
    form
Iscrizione nuovi atleti da coach
    path
    form
    scelta del torneo tramite select